functors

mapping between categories

given two categories C and D,
a functor F maps objects in C to objects in D
as well as mapping morphisms, preserving connections

a functor is a function on objects and morphisms

thus for morphism f in C,
f :: a -> b
morphism F f in D, likewise connects objects F a, F b
F f :: F a -> F b

furthermore, Functors preserve composition of morphisms
h = g . f
F h = F g . F f

functors may do both collapsing and embedding
e.g.
if C is the singleton,
a functor from C to any D simply selects a object in D
vice versa if D is the singleton,
a functor from any C to D simply maps any object to the singleton
(and any morphisms to the identity), this is the constant functor

in our practical category of types and functions, Hask,
we are concerned with functors that map the category to itself,
the functors known as 'endofunctors'

types which map to types, these are parameterized types

the Maybe Functor
a mapping from type a to type Maybe a
data Maybe a = Nothing | Just a

Maybe is not a type but a type constructor

for our endofunctor, we also need a mapping on morphisms (functions in Hask)
thus for any
f :: a -> b
we would also like a
f' :: Maybe a -> Maybe b
f' Nothing = Nothing
f' (Just x) = Just (f x)

the morphism mapping part of our (endo)functors is implemented as a
higher order function called fmap
fmap :: (a -> b) -> (Maybe a -> Maybe b)
fmap _ Nothing = Nothing
fmap f (Just x) = Just (f x)

class Functor f where
    fmap :: (a -> b) -> f a -> f b
 
in the typeclass definition, f is a type variable like a and b,
however ghc can deduce it represents a type constructor not a type
because it is acting on other types

thus to declare a Functor instance requires a type constructor

instance Functor Maybe where
    fmap _ Nothing = Nothing
    fmap f (Just x) = Just (f x)

instance Functor List where
    fmap _ Nil = Nil
    fmap f (Cons x t) = Cons (f x) (fmap f t)

fmap :: (a -> b) -> (r -> a) -> (r -> b)

instance Functor ((->) r) where
    fmap f g = f . g

or, equivalently

fmap f g = (.) f g

which becomes

fmap = (.)

This partially applied type constructor ((->) r)
is called the reader functor